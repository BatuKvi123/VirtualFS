local MiniVM = {
    root = {},
    metadata = {}
}

local function splitPath(path)
    local parts = {}
    for part in string.gmatch(path, "[^/]+") do
        table.insert(parts, part)
    end
    return parts
end

local function getFolder(vm, path)
    local parts = splitPath(path)
    local current = vm.root
    for i = 1, #parts - 1 do
        local part = parts[i]
        if type(current[part]) ~= "table" then
            return nil, "Folder not found: " .. part
        end
        current = current[part]
    end
    return current, parts[#parts]
end

function MiniVM:CreateFolder(path)
    local parent, name = getFolder(self, path)
    if not parent then return false, name end
    if parent[name] then return false, "Already exists" end
    parent[name] = {}
    return true, "Folder created"
end

function MiniVM:CreateFile(path, content)
    local parent, name = getFolder(self, path)
    if not parent then return false, name end
    if parent[name] then return false, "Already exists" end
    parent[name] = content or ""
    self.metadata[path] = {
        created = os.time(),
        size = #content,
        type = "lua/script",
    }
    return true, "File created"
end

function MiniVM:SetFileMetadata(path, data)
    self.metadata[path] = data
end

function MiniVM:GetFileMetadata(path)
    return self.metadata[path]
end

function MiniVM:ReadFile(path)
    local parent, name = getFolder(self, path)
    if not parent or type(parent[name]) ~= "string" then
        return nil, "File not found"
    end
    return parent[name]
end

function MiniVM:WriteFile(path, content)
    local parent, name = getFolder(self, path)
    if not parent or type(parent[name]) ~= "string" then
        return false, "File not found"
    end
    parent[name] = content
    if self.metadata[path] then
        self.metadata[path].size = #content
    end
    return true, "File written"
end

function MiniVM:DeleteFile(path)
    local parent, name = getFolder(self, path)
    if not parent or not parent[name] then
        return false, "File or folder not found"
    end
    parent[name] = nil
    self.metadata[path] = nil
    return true, "Deleted"
end

function MiniVM:ListFolder(path)
    local folder = self.root
    if path and path ~= "" then
        local parent, name = getFolder(self, path)
        if not parent or type(parent[name]) ~= "table" then
            return nil, "Folder not found"
        end
        folder = parent[name]
    end

    local list = {}
    for k, v in pairs(folder) do
        table.insert(list, type(v) == "table" and (k .. "/") or k)
    end
    return list
end

function MiniVM:Import(path)
    local code, err = self:ReadFile(path)
    if not code then return nil, err end

    local wrapped = "return {\n" .. code .. "\n}"
    local env = setmetatable({}, { __index = _G })
    local chunk, loadErr = loadstring(wrapped, path, "t", env)
    if not chunk then
        return nil, "Error loading code: " .. tostring(loadErr)
    end

    local ok, result = pcall(chunk)
    if not ok then
        return nil, "Runtime error: " .. tostring(result)
    end

    return result
end

function MiniVM:RunCommand(cmd)
    print("> " .. cmd)
    local args = {}
    for word in string.gmatch(cmd, "[^%s]+") do
        table.insert(args, word)
    end
    local command = args[1]

    if command == "ls" then
        local folder = args[2] or ""
        local files = self:ListFolder(folder)
        if files then
            for _, f in ipairs(files) do print(f) end
        else
            print("Folder not found")
        end

    elseif command == "cat" then
        local file = args[2]
        local content = self:ReadFile(file)
        print(content or "File not found")

    elseif command == "run" then
        local file = args[2]
        local result, err = self:Import(file)
        if result then
            print("Module loaded. Functions:")
            for k, v in pairs(result) do
                print("  " .. tostring(k))
            end
        else
            print("Error:", err)
        end
    else
        print("Unknown command:", command)
    end
end

return MiniVM
