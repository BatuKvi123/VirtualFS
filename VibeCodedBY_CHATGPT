local VirtualFS = {}

VirtualFS._files = {}
VirtualFS._directories = {}
VirtualFS._openHandles = {}
VirtualFS._events = {}

-- Event System
function VirtualFS:AddEventListener(event, callback)
	if not self._events[event] then
		self._events[event] = {}
	end
	table.insert(self._events[event], callback)
end

function VirtualFS:_TriggerEvent(event, filename)
	local list = self._events[event]
	if list then
		for _, cb in ipairs(list) do
			cb(filename)
		end
	end
end

-- Directory
function VirtualFS:CreateDirectory(name)
	if self._directories[name] then
		error("Directory already exists: " .. name)
	end
	self._directories[name] = {}
end

-- File
function VirtualFS:CreateFile(name, dir)
	if dir then
		local d = self._directories[dir]
		if not d then error("Directory not found: " .. dir) end
		if d[name] then error("File already exists in directory: " .. name) end
		d[name] = ""
	else
		if self._files[name] then error("File already exists: " .. name) end
		self._files[name] = ""
	end
	self:_TriggerEvent("create", name)
end

function VirtualFS:OpenFile(name, mode, dir)
	if mode ~= "w" and mode ~= "r" then
		error("Invalid mode (use 'r' or 'w')")
	end
	local content = dir and self._directories[dir] or self._files
	if not content or not content[name] then
		error("File not found: " .. name)
	end
	local handle = {
		name = name,
		mode = mode,
		dir = dir
	}
	self._openHandles[name] = handle
	return handle
end

function VirtualFS:WriteToFile(handle, text)
	if handle.mode ~= "w" then error("File not opened in write mode") end
	local target = handle.dir and self._directories[handle.dir] or self._files
	target[handle.name] = (target[handle.name] or "") .. text
	self:_TriggerEvent("modify", handle.name)
end

function VirtualFS:ReadFromFile(handle)
	local target = handle.dir and self._directories[handle.dir] or self._files
	return target[handle.name]
end

function VirtualFS:CloseFile(handle)
	self._openHandles[handle.name] = nil
end

function VirtualFS:DeleteFile(name, dir)
	local target = dir and self._directories[dir] or self._files
	if not target or not target[name] then
		error("File not found: " .. name)
	end
	target[name] = nil
	self:_TriggerEvent("delete", name)
end

function VirtualFS:ListFiles(dir)
	local target = dir and self._directories[dir] or self._files
	local list = {}
	for k in pairs(target) do
		table.insert(list, k)
	end
	return list
end

-- Import (module-style)
function VirtualFS:ImportFile(name, dir)
	local target = dir and self._directories[dir] or self._files
	local code = target[name]
	if not code then error("File does not exist: " .. name) end

	local env = setmetatable({}, { __index = _G })
	local chunk, err = load(code, name, "t", env)
	if not chunk then error("Import error: " .. err) end
	local result = chunk()
	return result or true
end

return VirtualFS
