-- VFS API Script
local VirtualFS = {}

VirtualFS._files = {}
VirtualFS._openFiles = {}
VirtualFS._events = {}
VirtualFS._directories = {}

function VirtualFS:AddEventListener(eventType, callback)
    self._events[eventType] = self._events[eventType] or {}
    table.insert(self._events[eventType], callback)
end

function VirtualFS:_TriggerFileEvent(eventType, filename)
    local events = self._events[eventType]
    if not events then return end
    for _, callback in ipairs(events) do
        callback(filename)
    end
end

function VirtualFS:CreateDirectory(name)
    if self._directories[name] then error("Directory already exists: " .. name) end
    self._directories[name] = {}
end

function VirtualFS:CreateFile(filename, dir)
    if dir then
        if not self._directories[dir] then error("Directory does not exist: " .. dir) end
        if self._directories[dir][filename] then error("File already exists in directory: " .. filename) end
        self._directories[dir][filename] = ""
    else
        if self._files[filename] then error("File already exists: " .. filename) end
        self._files[filename] = ""
    end
    self:_TriggerFileEvent("create", filename)
end

function VirtualFS:OpenFile(filename, mode, dir)
    if mode ~= "w" and mode ~= "r" then error("Invalid mode: " .. mode) end

    local content = dir and self._directories[dir] or self._files
    if not content then error("Directory does not exist: " .. (dir or "root")) end
    if not content[filename] then error("File not found: " .. filename) end

    local handle = {
        name = filename,
        mode = mode,
        dir = dir,
        type = "virtual_file_handle"
    }
    self._openFiles[filename] = handle
    return handle
end

function VirtualFS:WriteToFile(file, data)
    if file.mode ~= "w" then error("File not opened in write mode") end

    local store = file.dir and self._directories[file.dir] or self._files
    store[file.name] = (store[file.name] or "") .. data
    self:_TriggerFileEvent("modify", file.name)
end

function VirtualFS:ReadFromFile(file)
    local store = file.dir and self._directories[file.dir] or self._files
    return store[file.name]
end

function VirtualFS:CloseFile(file)
    self._openFiles[file.name] = nil
end

function VirtualFS:DeleteFile(filename, dir)
    local store = dir and self._directories[dir] or self._files
    if not store[filename] then error("File not found: " .. filename) end
    store[filename] = nil
    self:_TriggerFileEvent("delete", filename)
end

function VirtualFS:ListFiles(dir)
    local store = dir and self._directories[dir] or self._files
    if not store then error("Directory does not exist: " .. (dir or "root")) end

    local results = {}
    for name in pairs(store) do
        table.insert(results, name)
    end
    return results
end

function VirtualFS:ImportFile(filename, dir)
    local code
    if dir then
        code = self._directories[dir] and self._directories[dir][filename]
    else
        code = self._files[filename]
    end
    if not code then error("File does not exist: " .. filename) end

    local env = setmetatable({}, { __index = _G })
    local chunk, err = load("return function()\n" .. code .. "\nend", filename, "t", env)
    if not chunk then error("Load error: " .. err) end

    local fn = chunk()
    return fn()
end

return VirtualFS
